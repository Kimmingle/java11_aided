package sec1;

public class SOLIDExam {

	public static void main(String[] args) {
		//SOLID : 객체지향 프로그래밍 (oops)의 5가지 설계 원칙
		//SRP : 단일 책임 원칙
		//OCP : 개방 폐쇄 원칙 _ 확장에 대해 열려있고, 수정에 대해서는 닫혀있어야한다는 원칙 (extends로 기능을 확장한다는 개념)
		//LSP : 리스코프 치환 원칙 _ 하위타입은 상위타입을 대체할 수 있어야 한다. 
		//ISP : 인터페이스 분리 원칙 _ 하나의 객체라고 하더라도 목적과 관심사가 다른 경우는 각기 다른 인터페이스로 적절하게 분리해야한다.  
		//DIP : 의존 역전 원칙_ 고수준 모듈은 저수준 모듈의 구현에 의존해서는 안되며, 저수준 모듈에 의존해야한다.
		//Dependency(의존성) : 모든 불필요한 기능 모듈을 처음부터 개발하여 어플리케이션을 만들순 없기 때문에 개발자는 기 만들어진 고수준 모듈에 의존하여 개발한다.
		
		//SOLID 객체지향 원칙을 적용하면 코드를 확장하고 유지보수 관리하기가 좋으며, 불필요한 복잡성을 제거하여 소요되는 시간을 줄임으로써 개발의 생산성을 높일 수 있다. 
		
		//Gof 패턴 : 5원칙에 의해 생겨난 자바의 디자인 패턴 :공통적으로 발생하는 문제를 예방하고 , 클래스의 재이용성을 높일 수 있다.
	}

}
